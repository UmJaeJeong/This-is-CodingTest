import java.util.*;
class Solution {
    int[][] visited;
    int[] dx = {0,0,1,-1};
    int[] dy = {1,-1,0,0};
    
    public int solution(int[][] maps) {
        int answer = 0;
        visited = new int[maps.length][maps[0].length];
        
        bfs(0,0,maps);
      answer = visited[maps.length-1][maps[0].length-1];
        return answer!=0?answer:-1;
    }
    
    public void bfs(int x, int y, int[][] maps){
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(x,y));
        visited[x][y] = 1;
        
        while(!q.isEmpty()){
            Node node = q.poll();
            
            
            for(int i=0; i<4;i++){
                int nx = node.x + dx[i];
                int ny = node.y + dy[i];
                
                if(nx>=0 && nx<maps.length  && ny>=0 && ny<maps[0].length){
                    
                    if(visited[nx][ny]==0 && maps[nx][ny]==1){
                       
                        q.offer(new Node(nx,ny));
                        visited[nx][ny] = visited[node.x][node.y]+1;
                    }
                }
            }
        }
    }
    
    class Node{
        int x;
        int y;
        public Node(int x, int y){
            this.x =x;
            this.y = y;
        }
    }
}
